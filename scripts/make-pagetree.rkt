#lang racket

(require (prefix-in config: "../content/config.rkt"))
(require sugar)
(require racket/pretty
         racket/string)

; TODO: this script is hot garbage and needs rewriting from scratch

(define all-files
  (for/list ([file (in-directory "content")]
             #:when (or (has-ext? (path->string file) "pm")
                        (has-ext? (path->string file) "html.pm")
                        (has-ext? (path->string file) "poly.pm")))
    (path->string file)))

(define (find-matching-file name path)

  (findf (λ (f)
           (and (string-contains? f name)
                (string-contains? f
                                  (if (equal? path "")
                                      "content"
                                      (format "content/~a" path)))))
         all-files))

; TODO: hot garbage
(define (find-matching-file-v2 name path)
  (pretty-print (format "Checking if ~a is in ~a" name path))
  (findf (λ (f)
           (and (string-contains? f
                                  (if (equal? path "")
                                      (format "/~a" name)
                                      (format "/~a/~a" path name)))
                (string-contains? f "content")))
         all-files))

(define (build-sexp tree [prefix ""])
  (let ([head (car tree)]
        [rest (cdr tree)])
    (define items
      (for/list ([item rest])
        (cond
          [(symbol? item)
           (define path
             (if (equal? prefix "")
                 (symbol->string item)
                 (string-append prefix (symbol->string item))))
           (define file (find-matching-file (symbol->string item) path))
           (and file (substring file 8))]
          [(list? item) (build-sexp item (string-append prefix (symbol->string (car item)) "/"))])))

    (define filtered-items (filter values items))

    (cond
      [(equal? prefix "") `(pagetree-root ,@filtered-items)]
      [else
       (define index-file (find-matching-file-v2 "index" prefix))
       (if index-file
           (cons (substring index-file 8)
                 (filter (λ (x) (not (equal? x (substring index-file 8))))
                         (append-map (λ (x)
                                       (if (list? x)
                                           (cdr x)
                                           (list x)))
                                     filtered-items)))
           (cons (string-trim prefix "/" #:right? #t) filtered-items))])))

(define (replace-extension path new-ext)
  (cond
    [(not (string? path)) path]
    [(string-contains? path ".poly.pm")
     (string-append (substring path 0 (- (string-length path) 8)) new-ext)]
    [(string-contains? path ".html.pm") (substring path 0 (- (string-length path) 3))]
    [else path]))

(define (transform-sexp-html sexp)
  (match sexp
    [(list 'pagetree-root items ...)
     `(pagetree-root ,@(for/list ([item (in-list items)])
                         (if (list? item)
                             (transform-sexp-html item)
                             (string->symbol (replace-extension item ".html")))))]
    [(cons head rest)
     (cons (string->symbol (replace-extension head ".html"))
           (for/list ([item (in-list rest)])
             (if (list? item)
                 (transform-sexp-html item)
                 (string->symbol (replace-extension item ".html")))))]))

(define (transform-sexp-pdf type sexp)
  (define (poly-pm? path)
    (string-contains? path ".poly.pm"))

  (match sexp
    [(list 'pagetree-root items ...)
     `(pagetree-root ,@(filter-map (λ (item)
                                     (if (list? item)
                                         (transform-sexp-pdf type item)
                                         (and (poly-pm? item)
                                              (string->symbol (replace-extension item type)))))
                                   items))]
    [(cons head rest)
     (define filtered-rest
       (filter-map (λ (item)
                     (if (list? item)
                         (transform-sexp-pdf type item)
                         (and (poly-pm? item) (string->symbol (replace-extension item type)))))
                   rest))
     (and (or (poly-pm? head) (pair? filtered-rest))
          (cons (if (poly-pm? head)
                    (string->symbol (replace-extension head type))
                    (string->symbol head))
                filtered-rest))]))

(define (write-ptree filename sexp)
  (with-output-to-file
   (build-path "content" filename)
   (λ ()
     (printf "#lang pollen\n\n")
     (printf "◊;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n")
     (printf "◊; WARNING: THIS FILE IS AUTOGENERATED                                            ;\n")
     (printf "◊; Generated by: scripts/make-pagetree.rkt                                       ;\n")
     (printf "◊; DO NOT EDIT THIS FILE DIRECTLY - YOUR CHANGES WILL BE OVERWRITTEN             ;\n")
     (printf
      "◊;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n")
     (printf "◊~a\n" (pretty-format sexp)))
   #:exists 'replace))

(define base-sexp (build-sexp config:pagetree))
(pretty-print base-sexp)
(write-ptree "index.ptree" (transform-sexp-html base-sexp))
(write-ptree "pdf.ptree" (transform-sexp-pdf ".pdf" base-sexp))
(write-ptree "tex.ptree" (transform-sexp-pdf ".tex" base-sexp))
